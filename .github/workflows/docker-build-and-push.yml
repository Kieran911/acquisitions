name: Docker Build and Push

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Additional tag suffix (optional)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/kubernetes-demo-api

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      CUSTOM_TAG: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate production timestamp tag
        id: timestamp
        run: |
          echo "prod_tag=prod-$(date -u '+%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"

      - name: Compute optional suffix
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag_suffix != '' }}
        run: echo "CUSTOM_TAG=${{ github.ref_name }}-${{ inputs.tag_suffix }}" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short,prefix=sha-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ steps.timestamp.outputs.prod_tag }},enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ env.CUSTOM_TAG }},enable=${{ env.CUSTOM_TAG != '' }}
          labels: |
            org.opencontainers.image.title=Acquisitions API
            org.opencontainers.image.description=Node.js Express API for acquisitions system
            org.opencontainers.image.vendor=Adrian Hajdin
            org.opencontainers.image.created=${{ steps.timestamp.outputs.created }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ steps.timestamp.outputs.created }}
            GIT_SHA=${{ github.sha }}
            GIT_REF=${{ github.ref_name }}

      - name: Generate build summary
        if: success()
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Image" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              echo "- $tag" >> $GITHUB_STEP_SUMMARY
            fi
          done <<< "${{ steps.meta.outputs.tags }}"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Ref:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Build failure notification
        if: failure()
        run: |
          echo "::error::Docker build failed - please check the build logs above for details"
          echo "::notice::Ensure your Dockerfile is properly configured and secrets are set correctly"
