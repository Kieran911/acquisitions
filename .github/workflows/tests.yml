name: Tests

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: jest
        run: npm test -- --coverage --runInBand

      - name: Append coverage summary
        if: success() && steps.jest.outcome == 'success'
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node <<'NODE'
const fs = require('fs');
const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
const lines = summary.total.lines || {};
const branches = summary.total.branches || {};
const functions = summary.total.functions || {};
const statements = summary.total.statements || {};

function format(metric, data) {
  return `${metric}: ${data.pct ?? 0}% (${data.covered ?? 0}/${data.total ?? 0})`;
}

const report = [
  "### Test coverage summary",
  `- ${format('Lines', lines)}`,
  `- ${format('Branches', branches)}`,
  `- ${format('Functions', functions)}`,
  `- ${format('Statements', statements)}`
].join('\n');

fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `${report}\n`);
NODE
          else
            echo "### Test coverage summary" >> $GITHUB_STEP_SUMMARY
            echo "- Coverage summary file not found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
          retention-days: 30

      - name: Post test summary
        if: always()
        run: |
          if [ "${{ steps.jest.outcome }}" = "success" ]; then
            echo "✅ Tests passed. Coverage artifacts uploaded." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed. Check the logs and coverage artifacts for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Annotate test failures
        if: failure() && steps.jest.outcome == 'failure'
        run: |
          echo "::error title=Tests failed::Review the failing tests. You can run 'npm test -- --coverage' locally for debugging."
